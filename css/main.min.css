@font-face {
  font-family: "Regular";
  src: url("../fonts/Raleway.ttf");
}
html {
  box-sizing: border-box;
}

*,
*::after,
*::before {
  box-sizing: inherit;
  outline: transparent;
}

ul,
ol {
  padding: 0;
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
li,
figure,
figcaption,
blockquote,
dl,
dd {
  margin: 0;
}

ul {
  list-style: none;
}

img {
  max-width: 100%;
  display: block;
}

input,
button,
textarea,
select {
  font: inherit;
}

body {
  min-height: 100vh;
}

a {
  text-decoration: none;
  color: inherit;
}

button {
  background-color: transparent;
  border: none;
  padding: 0;
  cursor: pointer;
}

body {
  display: flex;
  flex-direction: column;
  height: 100%;
  font-family: "Raleway", sans-serif;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.25;
  color: #323232;
  background-color: #ffffff;
}

.section {
  flex: 1 1 auto;
  min-height: 100%;
}

.container {
  max-width: 1920px;
  width: 100%;
  height: 100%;
  margin: 0 auto;
  padding: 0 260px;
}

.header {
  padding: 30px 0 23px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  z-index: 1000;
}

.menu {
  text-transform: capitalize;
}
.menu__list {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-end;
  gap: 64px;
}
.menu__item {
  text-transform: capitalize;
  position: relative;
}
.menu__item:not(:last-child)::before, .menu__item:not(:last-child)::after {
  content: "";
  position: absolute;
  height: 2px;
  background: #ffffff;
  top: auto;
  bottom: 0;
  left: 50%;
  right: 50%;
  transition: 0.2s ease-in;
}
.menu__item:hover::before {
  left: 0;
}
.menu__item:hover::after {
  right: 0;
}

.main {
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 35px;
  margin: auto 150px;
  max-width: 480px;
  height: 100%;
}
.main__title {
  font-size: 60px;
  line-height: 1.3;
  font-weight: bold;
}
.main__title span {
  color: #A92A1D;
}

.footer {
  background: #323232;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
